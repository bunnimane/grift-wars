var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

// Window functions  v1.01
// http://www.dithered.com/javascript/window/index.html
// code by Chris Nott (chris@dithered.com)

/*******************************************************************************
   Popup Window openers
*******************************************************************************/

var winReference = null;


// Open a window at a given position on the screen
function openPositionedWindow(url, name, width, height, x, y, status, scrollbars, moreProperties, openerName) {

   // ie4.5 mac - windows are 2 pixels too short; if a statusbar is used, the window will be an additional 15 pixels short
   var agent = navigator.userAgent.toLowerCase();
   if (agent.indexOf("mac")!=-1 && agent.indexOf("msie") != -1 && agent.indexOf("msie 5.0")==-1) {
      height += 2;
      if (status) height += 15;
   }

   // Adjust width if scrollbars are used (pc places scrollbars inside the content area; mac outside)
   width += (scrollbars != '' && scrollbars != null && agent.indexOf("mac") == -1) ? 16 : 0;

   var properties = 'width=' + width + ',height=' + height + ',screenX=' + x + ',screenY=' + y + ',left=' + x + ',top=' + y + ((status) ? ',status' : '') + ',scrollbars' + ((scrollbars) ? '' : '=no') + ((moreProperties) ? ',' + moreProperties : '');
   var reference = openWindow(url, name, properties, openerName);

   // resize window in ie if we can resize in ns; very messy
   // commented out because openPositionedWindow() doesn't set the resizable attribute
   // left in for reference
   /*if (resizable && agent.indexOf("msie") != -1) {
      if (agent.indexOf("mac") != -1) {
         height += (status) ? 15 : 2;
         if (parseFloat(navigator.appVersion) > 5) width -= 11;
      }
      else {
         height += (status) ? 49 : 31;
         width += 13;
      }
      setTimeout('if (reference != null && !reference.closed) reference.resizeTo(' + width + ',' + height + ');', 150);
   }*/

   return reference;
}


// Open a window at the center of the screen
function openCenteredWindow(url, name, width, height, status, scrollbars, moreProperties, openerName) {
   var x = 0;
   var y = 0;
   if (screen) x = (screen.availWidth - width) / 2;
   if (screen) y = (screen.availHeight - height) / 2;
   if (!status) status == '';
   if (!openerName) openerName == '';
   var reference = openPositionedWindow(url, name, width, height, x, y, status, scrollbars, moreProperties, openerName);
   return reference;
}


// Open a full-screen window (different from IE's fullscreen option)
function openMaxedWindow(url, name, scrollbars, openerName) {
   var width  = 600;
   var height = 800;
   if (screen) width  = screen.width - 10;
   if (screen) height = screen.height - 30;
   var reference = openPositionedWindow(url, name, width, height, 0, 0, false, scrollbars, openerName, moreProperties);
   return reference;
}


// Open a full-chrome (all GUI elements) window
// This is like using a target="_blank" in a normal link but allows focussing the window
function openFullChromeWindow(url, name, openerName) {
   return openWindow(url, name, 'directories,location,menubar,resizable,scrollbars,status,toolbar');
}


// Core utility function that actually creates the window and gives focus to it
function openWindow(url, name, properties, openerName) {

   // ie4.x pc can't give focus to windows containing documents from a different domain
   // in this case, initially load a local interstisial page to allow focussing before loading final url
   var agent = navigator.userAgent.toLowerCase();
   if (agent.indexOf("msie") != -1 && parseInt(navigator.appVersion) == 4 && agent.indexOf("msie 5") == -1 && agent.indexOf("msie5") == -1 && agent.indexOf("win") != -1 && url.indexOf('http://') == 0) {
      winReference = window.open('about:blank', name, properties);

      setTimeout('if (winReference && !winReference.closed) winReference.location.replace("' + url + '")', 300);
   }
   else {
      winReference = window.open(url, name, properties);
   }

   // ie doesn't like giving focus immediately (to new window in 4.5 on mac; to existing ones in 5 on pc)
   setTimeout('if (winReference && !winReference.closed) winReference.focus()', 200);

   if (openerName) self.name = openerName;
   return winReference;
}


// added by Shaun Krislock (Blast Radius) for nintendo.com version 1.1.  Must have had "nintendoFamilyURLs" previously defined
//   (preferrably from the include script "nintendoFamilyURL.js")
function openOutsideURL(openThisURL) {
   // see if the URL is a nintendo family
   // obtain just the first part of the url
   var urlRoot = "";  // a variable to hold just the www.wherever.com section of the URL
   if (openThisURL.indexOf("http://") == 0) {
      urlRoot = openThisURL.substr(7); // no second parameter means include the rest of the string
      // now trim off excess code
      if (urlRoot.indexOf("/") != -1) {
         urlRoot = urlRoot.substring(0,urlRoot.indexOf("/")); //
      }
   } else if (openThisURL.indexOf("/") != -1) {
      urlRoot = openThisURL.substring(0,openThisURL.indexOf("/"));
   }
   if (nintendoFamilyURLs.indexOf(urlRoot) != -1) {
      // if it is, then just open up a new window
      openFullChromeWindow(openThisURL, 'offsite');
   } else {
      // if it is not, then popup the warning
      openCenteredWindow('/popups/leaving.jsp?url=' + openThisURL,'small',270,230);
   }
   return;
}


/*******************************************************************************
   Modal Dialog controls
*******************************************************************************/

// Close a dialog
// Call from onunload event handler of any page that can create a dialog
function closeDialog(dialog) {
   if (dialog && dialog.closed != true) dialog.close();
}


// Close parent popup
// Call from onload event handler of any page that could be created from a dialog
function closeParentDialog() {
   if (top.opener && isWindowPopup(top.opener)) {
      root = top.opener.top.opener;
      top.opener.close();
      top.opener = root;
   }
}


// Check if a window is a popup
function isWindowPopup(win) {
   return ((win.opener) ? true : false);
}



}
/*
     FILE ARCHIVED ON 22:14:30 Aug 02, 2002 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 06:00:33 Jan 21, 2023.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 118.483
  exclusion.robots: 0.064
  exclusion.robots.policy: 0.059
  cdx.remote: 0.04
  esindex: 0.005
  LoadShardBlock: 79.91 (3)
  PetaboxLoader3.datanode: 92.522 (4)
  CDXLines.iter: 14.28 (3)
  load_resource: 89.033
  PetaboxLoader3.resolve: 35.342
*/